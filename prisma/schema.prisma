// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth related
  refreshTokens RefreshToken[]
  passwordResetTokens PasswordResetToken[]

  // Subscription related
  subscription Subscription?

  // Projects
  projects Project[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  stripeCustomerId  String?           @unique
  stripeSubscriptionId String?        @unique
  status            SubscriptionStatus @default(INACTIVE)
  plan              Plan              @default(FREE)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  CANCELED
  PAST_DUE
}

enum Plan {
  FREE
  PRO
}
